#!/bin/bash

TOP=$(readlink -f $(dirname ${BASH_SOURCE:-$0})/..)

if [ ! -f $TOP/scripts/functions.sh ]; then
	echo "Failed to source functions.sh" && exit 1
else
	. $TOP/scripts/functions.sh
fi

download_and_unpack() {
	local url=$1
	local file=$(basename $url)
	wget -q -O $TOP/build/downloads/${file} $url || exit 1
	tar xzf $TOP/build/downloads/${file} --no-same-permissions --no-same-owner -m -C $TOP/build/rootfs 2>/dev/null
}

parse_field() {
	local file=$1
	local field=$2
	echo $(tar -O -xzf $1 .PKGINFO 2>/dev/null | sed -n -r "s/$field = (.*)/\1/p"| tr '\n' ' ')
}

add_apk() {
	local apk=$1
	local repo=$2/armhf
	mkdir -p $repo
	wget -q -O $repo/${apk} http://dl-cdn.alpinelinux.org/alpine/v3.10/main/armhf/${apk} || exit 1
#	echo $repo/$apk
#	echo C:  # >>$repo/APKINDEX
#	echo P:$(parse_field $repo/$apk pkgname) # >>$repo/APKINDEX
#	echo V:$(parse_field $repo/$apk pkgver) # >>$repo/APKINDEX
#	echo A:$(parse_field $repo/$apk arch) # >>$repo/APKINDEX
#	echo S:$(stat --printf="%s" $repo/$apk) # >>$repo/APKINDEX
#	echo I:$(parse_field $repo/$apk size) # >>$repo/APKINDEX
#	echo T:$(parse_field $repo/$apk pkgdesc) # >>$repo/APKINDEX
#	echo U:$(parse_field $repo/$apk url) # >>$repo/APKINDEX
#	echo L:$(parse_field $repo/$apk license) # >>$repo/APKINDEX
#	echo o:$(parse_field $repo/$apk origin) # >>$repo/APKINDEX
#	echo m:$(parse_field $repo/$apk maintainer) # >>$repo/APKINDEX
#	echo t:$(parse_field $repo/$apk builddate) #>>$repo/APKINDEX
#	echo c:$(parse_field $repo/$apk commit) #>>$repo/APKINDEX
#	echo D:$(parse_field $repo/$apk depend) #>>$repo/APKINDEX
#	echo p:$(parse_field $repo/$apk provides) #>>$repo/APKINDEX
#	echo #>>$repo/APKINDEX
}

generate_index() {
	local repo=$1
	local sig=$repo/armhf/signature.tar.gz
	local signed=.SIGN.RSA.$PUBKEY
	local untrusted=$repo/armhf/APKINDEX.untrusted.tar.gz
	local index=$repo/armhf/APKINDEX.tar.gz
	$TOP/build/tools/apk index --rewrite-arch armhf -o $untrusted $repo/armhf/*.apk >/dev/null 2>&1 || exit 1
	openssl dgst -sha1 -sign $BUILDDIR/keys/$PRIVKEY -out $repo/armhf/$signed $untrusted || exit 1
	tar -c -O -C $repo/armhf $signed | $TOP/build/tools/abuild-tar --cut | gzip -9 > $sig
	cat $sig $untrusted > $index
	rm -rf $untrusted $sig $repo/armhf/$signed
}

rm -rf $BUILDDIR/rootfs
rm -rf $BUILDDIR/downloads

mkdir -p $TOP/build/downloads/ || exit 1
mkdir -p $TOP/build/rootfs/ || exit 1

download_and_unpack "http://dl-cdn.alpinelinux.org/alpine/v3.10/releases/armhf/alpine-rpi-3.10.0-armhf.tar.gz" $BUILDDIR/rootfs || exit 1
add_apk alsa-lib-1.1.9-r0.apk $BUILDDIR/rootfs/pimodem/ || exit 1
add_apk alsa-lib-dev-1.1.9-r0.apk $BUILDDIR/rootfs/pimodem/ || exit 1
add_apk pkgconf-1.6.1-r1.apk $BUILDDIR/rootfs/pimodem/ || exit 1
add_apk dropbear-2019.78-r0.apk  $BUILDDIR/rootfs/pimodem/ || exit 1
add_apk dropbear-openrc-2019.78-r0.apk $BUILDDIR/rootfs/pimodem/ || exit 1
add_apk sudo-1.8.27-r0.apk $BUILDDIR/rootfs/pimodem/ || exit 1
cp $BUILDDIR/$PKGNAME/pimodem-1.0.0-r0.apk $BUILDDIR/rootfs/pimodem/armhf || exit 1
generate_index $BUILDDIR/rootfs/pimodem/ || exit 1
cp $BUILDDIR/pimodem.apkovl.tar.gz $BUILDDIR/rootfs

exit 0
